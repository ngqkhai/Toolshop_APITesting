name: Toolshop API Tests - COMPLETE WORKING VERSION

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  API_BASE_URL: http://localhost:8081

jobs:
  test-api:
    name: Test Toolshop API
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Free Disk Space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker Installation
        run: |
          echo "üê≥ Docker version information:"
          docker --version
          docker compose version
          echo "‚úÖ Docker Compose V2 is available"

      - name: Navigate to Sprint Directory
        run: cd sprint5-with-bugs

      - name: Start Application Stack
        working-directory: sprint5-with-bugs
        run: |
          echo "üöÄ Starting the application stack..."
          
          # Set environment variable for sprint folder
          echo "SPRINT=sprint5-with-bugs" > .env
          
          # Use docker compose (V2 syntax) instead of docker-compose
          docker compose up -d --build
          
          echo "‚è≥ Waiting for services to start..."
          sleep 90
          
          echo "üìã Container status:"
          docker compose ps
          
          echo "üîç Checking container logs:"
          docker compose logs --tail=30

      - name: Wait for API Ready
        working-directory: sprint5-with-bugs
        run: |
          echo "‚è≥ Waiting for API to be ready..."
          
          # Test both potential API endpoints
          for i in {1..40}; do
            if curl -f -s http://localhost:8081/products > /dev/null 2>&1; then
              echo "‚úÖ API is ready on port 8081!"
              echo "API_BASE_URL=http://localhost:8081" >> $GITHUB_ENV
              break
            elif curl -f -s http://localhost:8091/products > /dev/null 2>&1; then
              echo "‚úÖ API is ready on port 8091!"
              echo "API_BASE_URL=http://localhost:8091" >> $GITHUB_ENV
              break
            elif [ $i -eq 40 ]; then
              echo "‚ùå API failed to start after 40 attempts"
              echo "üîç Final container status:"
              docker compose ps
              echo "üîç API logs:"
              docker compose logs laravel-api
              echo "üîç Web server logs:"
              docker compose logs web
              echo "üîç Database logs:"  
              docker compose logs mariadb
              echo "üîç Testing connectivity:"
              curl -v http://localhost:8081/products || true
              curl -v http://localhost:8091/products || true
              exit 1
            else
              echo "‚è≥ Attempt $i/40: Testing API connectivity..."
              sleep 15
            fi
          done

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Newman
        run: |
          npm install -g newman newman-reporter-htmlextra
          newman --version

      - name: Test Basic API Endpoints
        working-directory: sprint5-with-bugs
        run: |
          echo "üß™ Testing basic API endpoints..."
          
          echo "Testing /products endpoint:"
          curl -v ${{ env.API_BASE_URL }}/products
          
          echo -e "\nTesting /users endpoint:"
          curl -v ${{ env.API_BASE_URL }}/users

      - name: Get Authentication Tokens
        id: auth
        working-directory: sprint5-with-bugs
        run: |
          echo "üîê Getting authentication tokens..."
          
          # Get admin token
          echo "Getting admin token..."
          ADMIN_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST ${{ env.API_BASE_URL }}/users/login \
            -H "Content-Type: application/json" \
            -d '{
              "email": "admin@practicesoftwaretesting.com",
              "password": "welcome01"
            }')
          
          ADMIN_BODY=$(echo $ADMIN_RESPONSE | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
          ADMIN_STATUS=$(echo $ADMIN_RESPONSE | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')
          
          echo "Admin login status: $ADMIN_STATUS"
          
          if [ "$ADMIN_STATUS" -eq 200 ]; then
            ADMIN_TOKEN=$(echo $ADMIN_BODY | jq -r '.access_token // empty')
            echo "admin_token=$ADMIN_TOKEN" >> $GITHUB_OUTPUT
            echo "‚úÖ Admin token obtained"
          else
            echo "‚ùå Admin login failed"
            echo "Response: $ADMIN_BODY"
          fi
          
          # Get user token
          echo "Getting user token..."
          USER_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST ${{ env.API_BASE_URL }}/users/login \
            -H "Content-Type: application/json" \
            -d '{
              "email": "customer@practicesoftwaretesting.com", 
              "password": "welcome01"
            }')
          
          USER_BODY=$(echo $USER_RESPONSE | sed -E 's/HTTPSTATUS\:[0-9]{3}$//')
          USER_STATUS=$(echo $USER_RESPONSE | tr -d '\n' | sed -E 's/.*HTTPSTATUS:([0-9]{3})$/\1/')
          
          echo "User login status: $USER_STATUS"
          
          if [ "$USER_STATUS" -eq 200 ]; then
            USER_TOKEN=$(echo $USER_BODY | jq -r '.access_token // empty')
            echo "user_token=$USER_TOKEN" >> $GITHUB_OUTPUT
            echo "‚úÖ User token obtained"
          else
            echo "‚ùå User login failed"
            echo "Response: $USER_BODY"
          fi

      - name: Run Postman Collection Tests
        working-directory: sprint5-with-bugs
        if: steps.auth.outputs.admin_token != '' && steps.auth.outputs.user_token != ''
        run: |
          echo "üß™ Running Postman collection tests..."
          
          # Create Newman environment
          cat > newman-env.json << EOF
          {
            "name": "GitHub Actions Environment",
            "values": [
              {
                "key": "baseUrl",
                "value": "${{ env.API_BASE_URL }}"
              },
              {
                "key": "admin_token", 
                "value": "${{ steps.auth.outputs.admin_token }}"
              },
              {
                "key": "user_token",
                "value": "${{ steps.auth.outputs.user_token }}"
              }
            ]
          }
          EOF
          
          # Create reports directory
          mkdir -p reports
          
          # Run Newman tests
          newman run Toolshop_APITesting.postman_collection.json \
            --environment newman-env.json \
            --reporters cli,htmlextra,junit \
            --reporter-htmlextra-export reports/newman-report.html \
            --reporter-junit-export reports/junit-report.xml \
            --delay-request 3000 \
            --timeout-request 20000 \
            --verbose

      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: sprint5-with-bugs/reports/
          retention-days: 30

      - name: Publish Test Results
        uses: dorny/test-reporter@v1
        if: always() && hashFiles('sprint5-with-bugs/reports/junit-report.xml') != ''
        with:
          name: Toolshop API Test Results
          path: sprint5-with-bugs/reports/junit-report.xml
          reporter: java-junit

      - name: Generate Test Summary
        working-directory: sprint5-with-bugs
        if: always()
        run: |
          echo "## üß™ Toolshop API Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "reports/junit-report.xml" ]; then
            TOTAL=$(grep -o 'tests="[0-9]*"' reports/junit-report.xml | cut -d'"' -f2)
            FAILURES=$(grep -o 'failures="[0-9]*"' reports/junit-report.xml | cut -d'"' -f2)
            ERRORS=$(grep -o 'errors="[0-9]*"' reports/junit-report.xml | cut -d'"' -f2)
            
            echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Total Tests | $TOTAL |" >> $GITHUB_STEP_SUMMARY
            echo "| Failures | $FAILURES |" >> $GITHUB_STEP_SUMMARY
            echo "| Errors | $ERRORS |" >> $GITHUB_STEP_SUMMARY
            echo "| API Base URL | ${{ env.API_BASE_URL }} |" >> $GITHUB_STEP_SUMMARY
            
            if [ "$FAILURES" -eq 0 ] && [ "$ERRORS" -eq 0 ]; then
              echo "| Status | ‚úÖ All tests passed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| Status | ‚ùå Some tests failed |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "‚ùå No test results found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Debug Information
        working-directory: sprint5-with-bugs
        if: failure()
        run: |
          echo "üîç Debug information for troubleshooting:"
          echo "=== Container Status ==="
          docker compose ps
          echo "=== API Logs ==="
          docker compose logs laravel-api
          echo "=== Web Server Logs ==="
          docker compose logs web
          echo "=== Database Logs ==="
          docker compose logs mariadb
          echo "=== Network Status ==="
          netstat -tlnp | grep :808 || echo "No processes on port 808x"
          echo "=== Disk Space ==="
          df -h

      - name: Cleanup Environment
        working-directory: sprint5-with-bugs
        if: always()
        run: |
          echo "üßπ Cleaning up..."
          docker compose down -v --remove-orphans
          docker system prune -f --volumes
